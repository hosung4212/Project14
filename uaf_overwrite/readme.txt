이건 내 노션 링크 보는게 낫긴 한데 일단 쓰겠다.
https://evergreen-zinnia-827.notion.site/Assign6-14b3c43a6130808d9bffc79ce17faa9c?pvs=4

1. 일단 청크라는 공간을 만들고 거기에 할당을 한다라고 생각해도 됨
2. 청크는 청크헤더와 데이터로 이루어져 있다가 해제 되면 bin으로 가는데 bin으로 가면 연결 리스트가 됨
3. 모든 bin에서 그런건 아니지만 여기서 사용된 unsorted_bin에서 최초로 해제된 청크의 fd와 bk는 주소값을 담고 있으며 이들은
라이브러리 내부의 주소임 
4. fd와 bk는 원래 데이터 값의 영역인데 그곳을 덮어쓴 것임. 그럼 이 부분을 다시 할당받아서 데이터를 출력한다면? 주소가 출력된다.
5. 그점을 이용해서 unsorted bin에서 해제된 청크의 fd와 bk값이 라이브러리 베이스 주소로부터 얼만큼의 오프셋을
가지는지 알아내고 이를 이용해 라이브러리 베이스의 실제 주소를 알아냄 
6. 이제 리틀 엔디언이 중요한데 맨처음 값은 무조건 침해되게 되어있음 fd는 데이터 맨처음부터 시작. 그리고 라이브러리 주소는 대부분 6바이트로 이루어져 있음.
7. 맨 앞의 값을 덮어 씌운다면 오프셋도 변함 이에 대한 설명은 자세히 쓰겠음 
첫번째 청크를 해제시키면 fd와 bk에 라이브러리 내부의 임의의 주소 할당됩니다. 
 이제 세로운 청크를 하나 할당하여 그 fd에 있는 값을 출력해내면 됩니다.
  여기서는 B가 하나를 덮기 때문에 라이브러리 베이스 주소와의 offset이 0x3ebc42입니다. 
B+fd(맨 앞 바이트 B로 덮어짐) 을 출력하기 때문에 맨 마지막에 a0 대신 42를 넣어서 올바른 오프셋을 만들어줍니다.
원래 주소가 0x00007ffff7dcdca0 라면 메모리에는 리틀엔디언으로 a0 dc dc f7 ff 7f  00 00 으로 저장이 되어있을텐데 
원래는 여기서  0x3ebca0 을  뺀 것이 라이브러리 원래 주소라면 우리는 데이터 B를 넣음으로써 a0 dc dc f7 ff 7f  00 00로 저장된 값을 
42 dc dc f7 ff 7f  00 00로 바꾸었고 바뀐 값에서 원래 라이브러리 주소를 구하려면 
0x00007ffff7dcdca0   0x3ebca0  = 00007ffff7dcdc42에서  0x3ebc42 가 성립하기 때문에 오프셋 값을 바꿔줘야 합니다.
이를 이용한다. 
8.모든 라이브러리 베이스를 찾았다면 로봇이 포인터를 이용해 이동하는 점을 이용해 human으로 age에 oneshot gadget 주소값을 넣고
거길 로봇이 할당받게 만들어 one_shot_gadget을 실행시키면 익스플로잇이 된다.
